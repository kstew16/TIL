# GC

안드로이드에서 앱 지연의 주된 이유는 GC의 빈번한 호출이다.

ART의 GC는 개선된 CMS 알고리즘을 사용한다. (Concurrent Mark & Sweep)
 - 스레드가 실행중인 상태에서(Concurrent) 추가되거나 객체의 참조가 끊긴 객체를 표시하고(Mark) Sweep 한다.

이 CMS 방식은 기본적으로 빠른 방식이지만,
 다른 GC 방식에 비해 메모리와 CPU를 더 많이 사용하고,Compaction (메모리 조각 모음)작업이 진행되지 않기 때문에 
Compaction 실행시 stop-the-world가 길어진다

DVM에서 ART로 넘어오면서 생긴 GC의 변화는 아래와 같다
 - 이니셜 마크 단계에서 stw 없이 루트가 살아있는지 확인
 - Static CMS Collector를 사용하여 생성된지 얼마 안 된 객체를 더 빠르게 처리
 - 일부 스윕 작업이 concurrent하게 발생
 - compaction 작업을 추가하여 stw 줄임
 - 앱이 백그라운드로 이동하면 메모리 영역을 모아 앱 중단 없이 메모리 재배열 가능 -> 메모리 연속 공간 확보에 이득
단, ART의 GC는 semi-space compaction으로 메모리를 통째로 미는 homogeneous compaction에 비해 주소 매핑에 시간이 추가로 소모된다.
다만 압축 효율이 좋아 메모리가 적은 기기에서 주로 사용된다.

GC는 힙의 메모리가 부족하거나, 앱이 백그라운드로 이동하거나, 사용자가 GC를 명시적으로 호출할 때(퍼포먼스에 치명적) 실행되는데 실행 내용에 따라 그 수행시간이 다르다.
GC가 처리할 일이 많을 때는 Stop-The-World가 발생하여 GC외의 모든 스레드가 중지되므로 앱 성능에 영향을 끼치게 된다.

