# 데이터베이스

## SQL

RDBMS에서 데이터를 저장/수정/삭제/검색하게 해주는 Structured Query Language
스키마 : 데이터베이스의 구조와 제약조건에 대한 명세
스키마를 준수한 레코드만이 테이블에 추가될 수 있다

장점 : 스키마를 통한 데이터 무결성 보장, 데이터는 중복 없이 한 번만 저장됨
단점 : 스키마가 사전 계획을 통해 규정되기 때문에 유연성이 약하고, 조인을 통해 데이터를 얻어낼 때 쿼리가 복잡해지기도 한다.

## NoSQL? Not only SQL

관계형 데이터베이스가 아닌 종류의 데이터베이스 - RDBMS를 포함하는 경우도 있음
스키마와 관계 없이 작업을 진행하는 동시에 데이터를 정의하게 됨 (그래프,열,키-문서,키-값 등)
SQL의 동시성에 대한 어려운 대응, 낮은 유연성과 속도라는 단점을 해결하기 위해 사용된다
데이터의 일관성과 조인에 대한 필요가 약한 경우 더 유연한 데이터 보관 형태로 사용할 수 있다.

## 관계형 데이터베이스

행렬 테이블으로 구성된 데이터베이스
열(필드, 속성, column) 데이터 유형을 가짐
행(레코드, 튜플, row) 데이터 유형에 해당하는 값을 가짐

각 row들이 관계를 맺고 연결될 수 있어서 관계형 데이터베이스라고 한다
만약 하나의 테이블에 모든 관련 데이터를 넣었으면 중복값/의미없는 null 항목들로 인해 비효율적이었을 것
한 테이블에서 사용하는 Primary key을 다른 테이블에 조인할 Foreign key로 사용하여 조인하게 됨

**정규화** : 데이터의 중복을 줄이고 무결성을 향상시키는 과정
 - 제 1 정규화 : 테이블이 하나의 값만을 갖도록 (메일 주소 두 개 이런거 없음) 원자화한다.
 - 제 2 정규화 : 기본키가 복합키(키1,키2)로 되어 있을 때 모든 속성은 키1과 키2에 모두 관계있어야 함 -> 종속성 없으면 쪼개기 가능
 - 제 3 정규화 : 이행적 종속 (1999년생이면 21살이고 21살이면 초등학교를 졸업했다 이런 A-B-C 관계)을 분리


### 조인

두 테이블의 연결
Inner : 지정한 테이블 속성이 겹치는 튜플만
Left Outer : 왼쪽 튜플들에다 오른쪽 테이블 속성 추가(Nullable)
Right Outer : 오른쪽 튜플들에다가 왼쪽 속성 추가(Nullable)
Full Outer : 모든 튜플을 모든 속성에 대해 표시(Nullable)
Equal Join : 동등 조건을 통한 조인을 이르는 말, 여기서 서로 같은 테이블이 중복 표시되지 않게 하면 Natural join

Cross : 튜플들의 조합 모두

### 인덱스

데이터베이스 테이블에 대한 검색 성능/속도를 높여 주는 자료구조 -> 컬럼에 대한 인덱스가 생성되면, 데이터가 정렬되어 별도 메모리 공간에 주소 저장
Balanced Tree 등을 사용해서(자식 여러개일 수 있음) 테이블 검색 속도를 향상시킨다
데이터 정렬을 위한 부하가 있기 때문에 데이터의 종류가 작을 경우 오히려 불리


### SQL Injection

악의적 SQL이 DB에 그대로 전달되어 비정상적 명령을 실행시키는 공격 기법
레코드의 속성 값을 쿼리문으로하여 동적 쿼리가 실행된다든지..

-> 유저가 건넨 값을 그대로 SQL에 넘기지도 말고 정규식 등으로 검증하며, 해당 쿼리에 대한 실행 에러문도 감춘다

### 트랜잭션

데이터베이스를 상태를 변화시키기 위해 수행하는 **작업**의 단위
`SELECT`,`INSERT`,`DELETE`,`UPDATE`의 조합
ex) 송금 트랜젝션 -> UPDATE 송금자 계좌 금액 + UPDATE 입금받는 계좌 금액
두 쿼리가 성공적으로 완료되어야 트랜잭션이 성공한 것이며 이것을 ** commit**이라고 함
만약 하나라도 실패한다면 이전 상태로 돌려 놓아야 함 **Rollback**

1. 원자성 : 트랜잭션 내용은 모두 반영되거나 모두 반영되지 않음
2. 일관성 : 작업 처리 이전과 이후 모두 유효해야 함
3. 독립성 : 트랜잭션끼리는 서로의 연산에 개입할 수 없음
4. 지속성 : 트랜잭션의 성공은 영구적으로 반영, 로그화되어야 함
