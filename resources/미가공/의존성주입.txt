# 의존성

한 객체가 다른 객체를 참조하는 것
ex) 뷰모델에서 데이터를 받아오기 위해 Repository에 (생성하며)의존

객체 간의 의존성이 높아지면 결합도가 증가하여 한 객체의 수정이 다른 객체의 수정을 불러오게 되며
모듈 단위의 테스트를 의미하는 `유닛 테스트`가 어렵게 만든다.

의존성이 존재하는 경우, 직접 객체 인스턴스를 생성하거나, 게터를 사용하거나, 의존성을 주입받을 수 있음

## 의존성 주입

의존성을 가진 객체를 외부에서 생성해 주입하는 방법이 있다.
이렇게 외부에서 객체를 주입하면 주입되는 객체의 구현이 바뀌어도 주입받는 객체를 재사용 할 수 있으며,
의존성이 구현 세부내용에 숨겨지지 않고 런타임/컴파일시에 드러나며, 각 객체의 독립적인 테스트가 가능해진다.

### 수동 의존성 주입 (세터 주입|필드 주입)

필요한 객체를 객체 외부에서 직접 생성하여 주입하기 - Activity에서 레포지토리를 생성해 뷰모델에 공급
- 객체 주입을 위한 보일러플레이트코드가 생성되고, 상위 객체의 책임이 커짐 (하위 객체 생성,수명 관리)

### 의존성 주입 라이브러리 사용 (생성자 주입)

수동 의존성 주입과 다르게 라이브러리를 사용하여 자동으로 의존성을 주입할 수 있다
런타임 시 리플렉션을 통하여 의존성을 주입 : `Guice`,`Koin` - 런타임 시 실행되므로 성능 저하 발생, 에러가 런타임에 발생
컴파일 타임에 종속 항목을 연결하여 의존성 주입 : `Dagger`,`Hilt`
`Hilt`는 `Dagger`의 핵심 기능을 모아 구글에서 제작한 프레임워크로, `Dagger`에 비해 **낮은 러닝커브**를 가진다.

*Tip - 뷰모델이 레포지토리를 주입받을 때,Interface를 사용하고, RepoImpl은 따로 분리했었다.
이렇게 추상화를 이용하면 뷰모델 코드의 변경 없이 외부에서 주입하는 레포지토리를 바꾸는 등 유지보수성에서 이점을 취할 수 있다.