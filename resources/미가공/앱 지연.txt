# 앱 지연

앱 지연은 크게 두 상황에서 일어난다
 - GC의 실행 : GC가 안드로이드 UI 업데이트 주기(16ms)보다 길게 실행되면 사용자는 프레임을 건너뛰게 된다
 - 메인 스레드에서 너무 UI 업데이트 주기보다 길게 소요되는 작업 실행

16ms? 눈이 60Hz정도는 돼야 안 끊긴다고 느낀다.

앱 지연을 피하기 위해서 취해야 할 해결방식들이다

불필요한 객체 할당을 피하고, lateinit을 사용할 것
비트맵의 로드에서 LRU 캐시와 비트맵 풀링(사용한 비트맵 메모리 재사용)을 적극 이용할 것
HashMap|Set<K,V> 대신에 ArrayMap|Set<K,V>를 사용할 것
Sparse${Type}Array 를 사용하여 HashMap<Integer,Type>을 대체할 것
무거운 작업은 백그라운드 스레드를 이용할 것
상수는 const val을 (static final) 사용할 것 -> const는 런타임에서 게터로 실행되지 않고 value그대로 대입된다
StrictMode 로 성능을 검증할 것


## LMK (low memory killer)
높은 메모리 압력에 대응하기 위한 리눅스 드라이버였으나, 커널 4.12부터 lmkd라는 이름으로 유저 공간을 점유하게 되었다
PSI(압력 스톨 정보)를 모니터하여 메모리 압력을 감지하는데, 작업 지연 정도와 커널에서 생성되는 `vmpressue`(거짓 양성 자주 포함)에 따라 메모리 압력을 감지한다
안드로이드 스튜디오의 메모리 프로파일러, LeakCnary 등이 힙 덤프(힙 상황 캡쳐)를 지원하여 메모리 누수를 확인하는데에 도움이 될 수 있다.

## 비트맵 로딩 관련

비트맵 로딩은 메모리를 많이 잡아먹으면서도 연산량이 많은 무거운 작업이다.

아래 작업들이 메모리관리/사용자 경험 증진에 도움이 될 수 있다.
LRU Cache (Least Recently Used) 방식은 최근에 사용된 이미지들을 캐싱하여 오버헤드를 줄인다
메모리 풀링 : 새 객체를 할당하기 전에 이미 사용했던 객체의 메모리 공간을 재사용하는것
Image sampling : 이미지의 일부를 미리 로딩하여 저해상도로 제공하고 마저 진행하는 것


Coil(경량) Glide(유연성) 등의 라이브러리를 비트맵 이미지 로딩에 사용하자.

## 스타트

콜드 스타트 : 부팅 후, 시스템에서 앱이 종료된 후 처음 실행 - 앱의 프로세스가 메모리에 없을 때의 실행
웜 스타트 : 시스템이 메모리에서/사용자가 실행중 앱에서 앱을 제거한 후 사용자가 다시 실행 - 전자의 경우에는 savedInstanceState에서 일부 도움을 받을 수 있음
 - 안드로이드 12부터 back버튼을 통해 앱을 종료하면 onDestroy()까지 동일하게 호출된 후 `메모리에 남아` 웜 스타트를 진행하게 된다.
핫 스타트 : 액티비티를 포그라운드로 가져오는 경우


