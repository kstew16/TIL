# 액티비티
리뷰하자면 액티비티는 사용자와 상호작용하기 위한 앱의 진입점.
액티비티가 액티비티 스택에 들어오는 것을 Running 전 과정, 스택에서 Pop 되는 것을 Running 이후 과정이락고 볼 수 있다.
Create -> Start -> Resume -> Running -> Pause -> Stop -> Destroy
Stop 에서 프로세스가 죽으면 create부터 다시, Pause가 풀리면 Start부터 다시
Pause VS Stop
Pause는 단순히  Focusing을 잃는다고 볼 수 있음. Dialog가 위에 올라오는데 뒤쪽에서 Dim 되어서 보이는 상태 같이
Stop은 Activity가 완전히 보이지 않는 상태,

Create -> 첫 생성시 실행, 레이아웃/뷰 관련된 것이 들어감 (ViewBinding, DataBinding)
Start -> 화면에 표시되기 직전에 실행 : 화면 진입시마다 실행되는 작업 추가
Resume -> 화면이 표시되고 나서 실행
Pause -> 다른 UI 구성요소의 활성화 이후 실행
Stop -> 화면이 invisible일때 실행
Destroy -> 액티비티가 완전히 종료되고 실행
Restart : Stop 에서 재실행될 때에 Start 이전에 실행

*A->B 액티비티 전환시에 원리를 잘 생각해라
Resume 전에는 액티비티가 보이지 않는 상태이므로 Stop이 호출되지 않는다. Pause까지만 call됨
따라서 APause BCreate BStart BResume AStop 이런식으로 진행됨

# 프래그먼트

프래그먼트는 다양한 기종에서 '코드 재사용을 통한' 서로 다른 화면 구성을 지원하는 UI 요소
List 화면과 ListDetail 화면이 있다고 할 때, 이 둘을 Fragment로 구성하여 ListActivity에 넣는다면
태블릿 등 화면 여유가 있는 경우 화면을 분할해서 서로 작업을 띄우게도 만들 수 있음
만약 둘이 서로 다른 Activity로 구성했다면 태블릿용 새로운 액티비티를 만들었어야 하겠지

여튼 부착된 형태로 운영되면서 특수한 생명주기들이 등장하는데
Attach : Context와 연결되는 과정. 처음 Activity에 부착될 때에만 호출
Create : 액티비티 create를 따라 실행, 단, Fragment는 View가 아직 생성되지 않은 시점
CreateView : Fragment View를 그리기 위해 layout Inflation이 진행됨, View를 반환
ViewCreated : 프래그먼트 뷰가 완성됨, 하위 뷰 객체를 초기화하기 좋은 시점
DestroyView : 뷰 계층이 제거되는 중에 호출, 바인딩을 해제해줘야 GC에 의해 정리 가능
ㄴ liveData는 구독 뷰가 Destroy 되어야 지워진다! 메모리 누수를 방지를 위해 viewLifeCycleOwner가 사용되게 됨
Detach : 액티비티와 연결이 끊어지는 중에 호출
나머지는 Activity와 유사하다고 보면 되겠음

# Task
Task는 애플리케이션에서 실행되는 Activity를 기록한다.
(실제 액티비티는 앱 프로세스 내에서 실행됨에 주의하라. Task는 해당 액티비티를 참조할 뿐이다)
Task를 이해하고 싶다면, 최근 앱 목록 : 작업관리자를 생각해라.
콘텐트 프로바이더 등을 통해 A앱에서 B앱으로 연결되더라도 생성된 task는 A앱을 base Activity로 갖는 Task이다.
현재 포그라운드에있는 액티비티를 포함하는 task는 backStack 또는 포그라운드 태스크라고 하며, 이외 task는 백그라운드 task가 된다

# LaunchMode
LaunchMode는 액티비티의 인스턴스가 task와 연결되는 방식을 결정한다. 따라서 액티비티별로 다르게 설정될 수 있다.
standard :  기본, 액티비티 인스턴스를 새로 생성하고 인텐트를 인스턴스로 라우팅 (동일 task 내 여러 인스턴스 존재 가능)
singleTop : task의 맨 위에 호출하는 액티비티가 있으면 새로 생성하지 말고 그대로 쓰기 (onNewIntent() 호출)
singleTask : 시스템이 새 task를 생성하고 task root의 액티비티를 인스턴스화한다. (이미 인스턴스를 포함하는 task가 있으면 task 생성 없이 onNewIntent() 호출)
singleInstance : 항상 task의 유일한 액티비티 인스턴스가 됨 : 다른 액티비티는 task가 분리됨

*Tip View/ViewGroup?
View는 안드로이드 화면에 보이는 모든 것을 지칭한다. View 차체적으로는 화면상의 위치 정보를 갖지 않기 때문에, 
ViewGroup(ViewContainer 또는 Layout)라는 특별한 View 클래스의 특별한 자식 클래스로 위치를 잡아 준다.