# Paging3 (JetPack)

페이징은 `로컬 DB`나 `Remote Source`데이터를 페이지 단위로 UI에 쉽게 표현할 수 있도록 도와주는 라이브러리이다
기존 RecyclerView의 최상/하단에 리스너를 설정하여 다음 페이지를 로드하는 과정 등도 API로 지원한다.

페이징 라이브러리 장점
 - 페이징된 데이터는 캐싱되어 리소스를 효율적으로 사용할 수 있음
 - 중복 요청 기능이 기본 제공되어 불필요한 요청을 막을 수 있음
 - 사용자가 리스트의 끝까지 스크롤한 경우에 자동으로 새로운 데이터 로드를 요청할 수 있음
 - Kotlin Coroutines 와 Flow, LiveData, RxJava와의 뛰어난 호환성을 가짐
 - 새로고침, 재시도, 오류 처리 기능을 기본으로 지원

구성요소
1. Repository Layer
 - PagingSource : 데이터 소스와 소스에서 데이터를 가져오는 방법을 정의한다.
 - RemoteMediator : 불러온 데이터를 로컬 데이터베이스에 캐싱하는 방법을 정의 (오프라인 사용)
 - PagingData : 페이징된 데이터의 컨테이너, 데이터의 새로고침시 새로운 인스턴스 생성

2. ViewModel Layer
 - Pager : PagingSource를 이용하여 PagingData 인스턴스를 구성하는 반응형 스트림을 생성한다.
PagingSource에서 데이터를 로드하는 방법, 옵션을 정의한 PagingConfig를 함께 사용한다.

3. UI Layer
 - PagingData를 뷰에 바인딩하기위해 사용한다.