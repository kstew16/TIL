# 디자인 패턴

문제를 해결하기 위한 **재사용 가능한** 솔루션

## 싱글톤 패턴

객체를 한 개로 유지하는 패턴, 많은 클라이언트가 공유하는 클래스에 대해 같은 인스턴스를 사용하게 한다.
데이터베이스 등 생성 비용이 큰 객체에 사용할 수 있다.

## iterator 패턴

객체 집합의 요소별 접근을 위한 패턴, 자바 Collections 등에 사용됨

## Adaptor 패턴

호환되지 않는 인터페이스를 가진 두 객체를 함께 사용할 수 있게 하는 패턴

## 데코레이터 패턴

객체를 래핑하여 동적으로 기능을 추가하는 데 쓰이는 패턴.
인터페이스/추상 클래스인 데코레이터(또는 래퍼)는 기존 클래스의 인터페이스를 상속받는다.
만약 이것을 서브클래스로 구현한다면 서로 다른 기능을 추가하기 위해 수많은 조합의 클래스를 구현해야 하지만
래퍼로 구현되었다면 새로운 기능을 적용하기 위해 또다른 래퍼를 씌우기만 하면 된다. (기존 클래스에 다 확장을 두는건 OCP 위반)

## 팩토리 메소드 패턴

객체 생성의 인터페이스를 제공하면서 그 인스턴스 생성은 하위 클래스에 맡기는 방식,
만약 객체를 직접 생성했다면 객체 생성 방식이 변경되었을 때 그 객체에 의존하는 코드도 변경이 이뤄지게 된다.
그러나 팩토리 메소드 패턴을 사용하면 팩토리만을 변경하게 된다.

## 추상 팩토리 패턴

추상 팩토리 패턴은 팩토리 메소드 패턴과 비슷하지만, 연관 있는 몇 개의 객체 집합을 생성하는 인터페이스를 제공한다
여기서 객체 집합의 의존성이 있을 경우, 팩토리를 다시 추상화한 클래스로 다시 한 번 팩토리를 추상화한다면 객체 집합을 효과적으로 수정할 수 있다.

## 옵저버 패턴

특정 이벤트의 발생에 반응해야하는 객체가 이벤트를 발생시키는 객체를 구독하고 이벤트를 수신하여 동작하는 패턴이다
이벤트 발생 객체는 인터페이스로 Listener등의 생성을 강제하고, 구독 객체는 이것을 구현하여 발생 객체에게 전달한다.

## 스테이트 패턴

객체가 상태에 따라 수행할 동작이 변경될 때 사용된다.
그런데 만약 이것을 조건문으로 구성한다면 이 조건문은 기능의 확장에 따라 점점 동작이 어려워진다.
따라서 (abstract,interface) State에 의존하는 Context 객체를 두고(안드로이드의 문맥과는 다르다!)
State들의 구현체들이 각자 State에 따른 동작을 수행하고 Context의 State 참조를 바꾸는 방식으로 작동한다.

## 레포지토리 패턴

데이터를 얻는 방식을 추상화하여 (DB,네트워크 등)방식에 상관 없이 데이터를 제공하는 인터페이스를 구현한 패턴
ex) 뷰모델은 직접 네트워크/DB에 접속하는 것이 아니라 Repository를 통해 여러 방식을 통해 얻은 데이터를 제공받는다.
데이터 로직이 데이터 가공층과 분리되며 결합성이 낮아지기 때문에 unit test의 용이성도 올라간다.
